worker_processes auto;

# Main error log and PID file
error_log C:/nginx/logs/error.log;
pid       C:/nginx/nginx.pid;

events {
    worker_connections 1024;
}

http {
	# Real client IP settings (useful if running behind a proxy like Cloudflare)
	set_real_ip_from 127.0.0.1;        # Trusted proxy address
    real_ip_header X-Forwarded-For;   # Extract client IP from header

    # Custom log format for detailed upstream tracing
    log_format main '$remote_addr - [$time_local] "$request" '
					'$status $body_bytes_sent '
					'upstream=$upstream_addr '
                    'upstream_status=$upstream_status '
                    '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
					'request_time=$request_time '
                    'upstream_response_time=$upstream_response_time';

    access_log C:/nginx/logs/access.log main;

	# Spring Boot application cluster (load balancing with least connections)
	upstream springboot_cluster {
        least_conn;  # New requests are sent to the server with the fewest active connections

        # Weighted servers: stronger servers handle more requests
		server 127.0.0.1:8081 weight=3 max_fails=3 fail_timeout=10s;
        server 127.0.0.1:8082 weight=3 max_fails=3 fail_timeout=10s;
    }

	# Save incoming x-request-id header (if present)
	map $http_x_request_id $req_id {
		default $http_x_request_id;
	}

    # --- Server 1: Proxy to Telegram API ---
    server {
        listen 127.0.0.1:9090;
        server_name localhost;

		# Restrict access to localhost only (adjust if needed)
        allow 127.0.0.1;
        deny all;

		# Define bot token as a variable (to be replaced manually)
		set $bot_token "FILL_ME";

		# Add the X-Request-ID back into the response
		add_header X-Request-ID $req_id always;

        # Replace placeholder with the actual bot token
        location ~ ^(.*)/botTOKEN_PLACEHOLDER/(.*)$ {

			rewrite ^(.*)/botTOKEN_PLACEHOLDER/(.*)$ $1/bot$bot_token/$2 break;

            proxy_pass https://api.telegram.org;

            # Preserve original headers
            proxy_set_header Host api.telegram.org;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # --- Server 2: Proxy to local Spring Boot cluster ---
    server {
        listen 127.0.0.1:80;
        server_name webhook_url;

		# Allow only Telegram official IP ranges for webhook calls
        allow 149.154.160.0/20;
        allow 91.108.4.0/22;
        deny all;

        location /api/telegram/webhook {
		    # Add a unique request ID for tracing
            add_header X-Request-ID $request_id;

            proxy_pass http://springboot_cluster;
            proxy_http_version 1.1;

			# Forward headers to backend (Spring Boot app)
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

			# Custom timeouts for better stability
			proxy_connect_timeout 5s;
			proxy_read_timeout 15s;
			proxy_send_timeout 10s;
        }
    }
}
